# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'basicUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import * 
from PyQt5.QtCore import * 
from PyQt5.QtWidgets import * 
import time
import cv2


class Ui_MainWindow(object):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.centralwidget = None
        self.statusLabel = None
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1120, 820)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: #FFFFFF;\nborder: transparent;\n")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.vidwidget = QtWidgets.QWidget(self.centralwidget)
        self.vidwidget.setGeometry(QtCore.QRect(335, 40, 450, 450))
        self.vidwidget.setObjectName("vidwidget")
        self.statusLabel = QtWidgets.QLabel(self.centralwidget)
        self.statusLabel.setGeometry(QtCore.QRect(330, 610, 450, 71))
        self.statusLabel.setAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Archivo")
        font.setPointSize(20)
        self.statusLabel.setFont(font)
        self.statusLabel.setStyleSheet("background: rgba(255, 255, 255, 0.3)")
        self.statusLabel.setObjectName("statusLabel")
        self.prompt = QtWidgets.QLabel(self.centralwidget)
        self.prompt.setGeometry(QtCore.QRect(220, 510, 680, 40))
        font = QtGui.QFont()
        font.setFamily("Archivo")
        font.setPointSize(18)
        self.prompt.setFont(font)
        self.prompt.setStyleSheet("background: rgba(255, 255, 255, 0.3)")
        self.prompt.setObjectName("prompt")
        self.prompt.setHidden(True)
        self.prompt.setAlignment(QtCore.Qt.AlignCenter)
        self.allowButton = QtWidgets.QPushButton(self.centralwidget)
        self.allowButton.setGeometry(QtCore.QRect(160, 590, 300, 120))
        font = QtGui.QFont()
        font.setFamily("Archivo")
        font.setPointSize(20)
        self.allowButton.setFont(font)
        self.allowButton.setStyleSheet("QPushButton {background-color: #D0E2FF;}"
                                       "QPushButton:pressed {background-color: #D0E2FF;}"
                                       "QPushButton:hover {background-color:  #A1C5FF;}")
        self.allowButton.setAutoDefault(False)
        self.allowButton.setObjectName("allowButton")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(25)
        self.allowButton.setGraphicsEffect(shadow)
        self.allowButton.hide()
        self.denyButton = QtWidgets.QPushButton(self.centralwidget)
        self.denyButton.setGeometry(QtCore.QRect(720, 590, 300, 120))
        font = QtGui.QFont()
        font.setFamily("Archivo")
        font.setPointSize(20)
        self.denyButton.setFont(font)
        self.denyButton.setStyleSheet("QPushButton {background-color: #D0E2FF;}"
                                      "QPushButton:pressed {background-color: #D0E2FF;}"
                                      "QPushButton:hover {background-color:  #A1C5FF;}")
        self.denyButton.setObjectName("denyButton")
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(25)
        self.denyButton.setGraphicsEffect(shadow)
        self.denyButton.hide()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1120, 21))
        self.menubar.setObjectName("menubar")
        self.menuFILE = QtWidgets.QMenu(self.menubar)
        self.menuFILE.setObjectName("menuFILE")
        self.menuCredits = QtWidgets.QMenu(self.menubar)
        self.menuCredits.setObjectName("menuCredits")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionStart = QtWidgets.QAction(MainWindow)
        self.actionStart.setObjectName("actionStart")
        self.actionexit = QtWidgets.QAction(MainWindow)
        self.actionexit.setObjectName("actionexit")
        self.menuFILE.addAction(self.actionStart)
        self.menuFILE.addAction(self.actionexit)
        self.menubar.addAction(self.menuFILE.menuAction())
        self.menubar.addAction(self.menuCredits.menuAction())
        self.detecting = detecting(self.statusLabel)
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Smart Lock Security System"))
        self.statusLabel.setText(_translate("MainWindow", "The system is idle"))
        
        self.prompt.setText(_translate("MainWindow", "This person is not authorized. Give permission to open the door."))
        self.allowButton.setText(_translate("MainWindow", "ALLOW"))
        self.denyButton.setText(_translate("MainWindow", "DENY"))
        self.menuFILE.setTitle(_translate("MainWindow", "File"))
        self.menuCredits.setTitle(_translate("MainWindow", "Credits"))
        self.actionStart.setText(_translate("MainWindow", "Start"))
        self.actionexit.setText(_translate("MainWindow", "Exit"))

    

    def detected(self, command):
        _translate = QtCore.QCoreApplication.translate
        if command == 1:
            self.statusLabel.setAlignment(QtCore.Qt.AlignCenter)
            self.statusLabel.setText(_translate("MainWindow", "Authorized. Door opening."))
            loop = QEventLoop()
            QTimer.singleShot(2000, loop.quit)
            loop.exec_()
            self.statusLabel.setText(_translate("MainWindow", "The system is idle"))

        if command == 0:
            self.statusLabel.setAlignment(QtCore.Qt.AlignCenter)
            self.statusLabel.setText(_translate("MainWindow", "Not Authorized. Access denied."))
            loop = QEventLoop()
            QTimer.singleShot(2000, loop.quit)
            loop.exec_()
            self.statusLabel.setText(_translate("MainWindow", "The system is idle"))

    def promptToUser(self):
        self.statusLabel.setHidden(True)
        self.prompt.setHidden(False)
        self.denyButton.show()
        self.allowButton.show()
        self.allowButton.clicked.connect(self.allowButtonClicked)
        self.denyButton.clicked.connect(self.denyButtonClicked)

    def allowButtonClicked(self):
        self.statusLabel.setHidden(False)
        self.prompt.setHidden(True)
        self.denyButton.hide()
        self.allowButton.hide()
        self.detected(1)

    def denyButtonClicked(self):
        self.statusLabel.setHidden(False)
        self.prompt.setHidden(True)
        self.denyButton.hide()
        self.allowButton.hide()
        self.detected(0)

    def updateImage(self, cv_img):
        qtimg = self.convert_cv_qt(cv_img)
        self.vidwidget.setPixmap(qtimg)
        
    def convert_cv_qt(self, cv_img):
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(720, 1280, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)

class detecting(QThread):
    def __init__(self, statusLabel):
        QThread.__init__(self)
        self.statusLabel = statusLabel
        self.ThreadActive = True
    def run(self):
        self.statusLabel.setAlignment(QtCore.Qt.AlignLeft)
        while self.ThreadActive:
            s="Detecting"
            for i in range (0,5):
                s+="."
                self.statusLabel.setText(s)
                loop = QEventLoop()
                QTimer.singleShot(1000, loop.quit)
                loop.exec_()
            print("stop")
    def stop(self):
        
        self.ThreadActive = False
        self.quit()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.detecting.start()
    print("printing")
    loop = QEventLoop()
    QTimer.singleShot(5000, loop.quit)
    loop.exec_()
    
    ui.detecting.stop()
    ui.promptToUser()


    sys.exit(app.exec_())
